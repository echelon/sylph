Sylph: NO MORE WEBSITES (Part I)
================================
This project is part of my research to build a web without websites. No party
should be able to exert control over how we produce/consume/share information.
The only way to make this happen is to decentralize _everything_. 

I've been slowly working on this research for four years, but after 
[Diaspora](http://www.nytimes.com/2010/05/12/nyregion/12about.html) unveiled 
their plans, I began working nonstop to beat them to it. Distributed 
informatics is bigger and far grander what the Diaspora team is trying to 
accomplish, but we have to start now. 

Sylph envisions a world with an infinite signal to noise ratio: 1:0. A platform
of infinite potential that can be evolved in any way. Imagine:

* No more ads
* No more marketers
* No more paywalls
* Sort & filter content with data mining algorithms **designed for you**
* Trackerless filesharing with _friends and known peers_
* News will be highly relevant: never read an off-topic headline again

And what about edge-cases, such as programmers and researchers?

* Even more distributed development practices and collaboration
* Find people working in your research area immediately
* Share files, papers, literature&mdash;no one can stop you.
* Algorithms can study how you collaborate in the graph to advise you of
  what you need to learn, who you should meet/mentor, and developments of
  concern. 

I want everyone to be involved in making this. 
[This document explains more](http://possibilistic.org/docs/sylph/).

Short-term objectives
---------------------
Now back to earth for a second... 

Building such a platform will take a considerable amount of time and effort to
get right. With the proper involvement and research, we can accomplish this. At 
present, however, we need to identify achievable and sustainable short-term
objectives. 

_This prototype_ of the sylph platform is written in Python, Django, and 
[Celery](http://github.com/ask/celery). Here are the goals we want to 
accomplish in iteration 1:

* **Scalable communications platform**
	* *Direct node-to-node* communications. 
	* *Many nodes-to-"agglomerative" node* (eg. a cache server, directory 
	  service, clustering system, etc.)
	* *API to node* (eg. Javascript library, desktop library/client to access
	  one's own node.)

* **Robust data exchange format**
	* RDF-based
	* Grounded in semantics so that it is extensible in the future
	* Idea of URI-dereferencable resources (though optional) to achieve both
	  current-web and future-web interoperability. 

* "Applications" on top of sylph:
	* Basic social networking facility, but not similar to present systems...
	  more focused on getting work/projects done in a distributed setting.
	* Ability to share commentary, news items, personal blogging, etc. in a
	  _relevant_ manner.
	* Ability to work together on projects, coding, research&mdash;easily. 

We're asking all developers and CS researchers to join us in this effort. 
Again, I have [more of the objectives listed 
here](http://possibilistic.org/docs/sylph/).

License
-------
The code is currently under the AGPL 3. As soon as I get more developers, we'll
probably license it under the MIT/BSD. 

Project Setup
-------------

Sylph currently requires the following:

* **Python 2.6**
* **Django 1.1**
* **Celery** (built from source, which also requires django-celery and billiard 
  be built.)
* **RabbitMQ** (eventually want to make this optional)
* **Relational database** (I'm using MySQL, but intend to test Postgres and 
  SQLite)

Running multiple instances on the same server is currently done as 
follows&mdash;first, start the first instance (defaults to port 8000):

> $ python manage.py runserver  
> $ python manage.py celeryd

To run a second instance on port 7000:

> $ python manage.py runserver 7000  
> $ python manage.py celeryd 7000

This requires that the databases 'sylph' and 'sylph7000' exist, as well as the
RabbitMQ virtual hosts 'sylph' and 'sylph7000'. ('8000' is always truncated, 
but any other port number will be appended to 'sylph' to serve as both the 
database name and RabbitMQ virtual host.) Be aware of permissions in the RMDBS 
and RabbitMQ!

As I'm in the prototyping stages, these configuration options are geared at
rapid development rather than long-term deployment. I'm rather new to Django 
and Celery myself, but I'm quickly getting familiar with them both. 


