TODO File
=========

Rules:
------
1. **Does not need to be perfect in 1st iteration.**
	1. Unnecessary items should be saved for final sprint.
	2. Don't worry about integrating or improving UI until nearing
	   completion of the first iteration.

2. **Keep it simple. Very simple.**

Immediate Concern
-----------------

* **Integrate the communications API into the models.**

> Node.ping()  
> response = Node.send(....)  
> response = Node.request(...)  
>
> Resource.lookup_at(Node) or   
> Node.lookup(resource)  
>  
> .......................  
> 
> Think about how Webpage GET, sylph ping|send|request, and web apis  
> will work -> communicator class & also multiple async connections  
> (keepalive)
>  
>  
> New Response(object):  
> * node_type() - determined by X-Sylph header  
> * was_redirected()  
> * error  
> * uri  
> * headers  
> * data  

* **Change ping semantics -- ping anything (ie webpages too) to figure
  out what they are.** This will mean pings must be HTTP GET (but that
  makes sense anyway for REST). We'll probably transmit all node info
  in the HTTP X-headers.

* **Reddit API (look for preexisting)** to post and include "posted with
  sylph distributed blah blah"
* **webservices will not use web2feed** they'll each have their own classes
  that dictate how we interact. They may even have the ability to know what
  topics we're viewing at the moment (so as to refresh them more frequently
  so long as we're viewing them.)


Minor:
------

* reset page needs _'dump data without dropping tables'_ mode (faster)

Still needed:
-------------

* Media (Image, Video, etc) application with downloading, caching
* Multilevel task priority (multiple queues)
* Tasks w/o RabbitMQ
* 'Channel posting' (similar to usenet/newsgroups -- use an index server)

Formal List:
------------

Basic list of things that need doing. All contributors can/should edit.

Note that all items that need to be fixed are marked "TODO" in the code.
Critical items are marked "XXX" or "TODO/XXX"

Iteration I Goals
-----------------
**Replacing the centralized web** needs to become an obvious paradigm shift for
other developers, therefore bootstrapping web content into Sylph needs to be 
implemented well. When people see this, they will understand why the web needs
to be replaced. 

* **Top content** (per the user's interests) needs to be identified. 
	* Only the best stories and commentary should be presented to the user 
	  unless they want to see more. 
* **Clustering similar items**: Similar stories should be clustered with 
  the 'best' coverage presented as the default view. 
* **Comments should be centralized**.
* **Everything we want to read** should be accessible through Sylph--virtually 
  no external links, if possible! (Perhaps that can only be realized 
  long-term.)
* Make it possible to **save & archive** stories and comments that are 
  important to us. Make them easy to search and share.

Immediate
---------
**Concentrate on web2rdf and bootstrapping web content into Sylph.**

Theory
------
* Fundamentally, we can't have users data change unless they're verified. But
  what if a new (untrusted) node changes a person in the graph that they're 
  not supposed to?

> A user can have an endpoint URI be their resource URI if we wish, since 
> essentially they are different data models. 

Short term
==========

Core/backend system
-------------------
* Improve and expand upon "Utilities" libraries
* Extensible API dispatcher system
* Make tasks/API easier to debug

Celery-related
--------------
* Run tasks immediately without RabbitMQ if it is detected RabbitMQ isn't 
  running and DEBUG=True.
* Easy way to use Celery without RabbitMQ

Organization
------------
* API and Task design must be sensible.

Long term
=========

Django apps
-----------
* **"Certify" app**, designed to certify that information is accurate by 
  tracking it down at its original source. Could  work in addition to PGP 
  signing. Protected info may require indentification from the requester. 
* **"Ratings" app**, designed to rate resources and aggregate the ratings of
  third parties.

Libraries to explore
--------------------
* [Django-South](http://south.aeracode.org/) for updating models when they 
  change. Once users start using Sylph, this is important. 
