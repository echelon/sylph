TODO File
=========

Rules:
------
1. **Does not need to be perfect in 1st iteration.**
	1. Unnecessary items should be saved for final sprint.
	2. Don't worry about integrating or improving UI until nearing
	   completion of the first iteration.

2. **Keep it simple. Very simple.**

* Task I'm working on now: pull user. (I think? or pull 
  see the celery errors...)
* reset page needs 'dump data without dropping tables' mode (faster)

Needed:
-------
* An actual endpoint dispatcher
* Integrated subscriptions system
* Integrated feeds/notification system

Temp:
-----

1. Post
2. Subscriptions
	1. Social (kind of goes hand in hand)
3. Feeds
4. Ratings
	1. (The above two go with data mining)
5. Bootstrap content
6. Cache/directory servers

Ungrouped:

* Media (images, etc.) exchange
* Multilevel task priority
* Tasks w/o RabbitMQ/AMQP
* 'Channel posting' (sim. to usenet) & blog items

Unnecessary items should be saved for final polish. 

_Don't worry about integrating the UI until things are mostly done._

**KEEP IT SIMPLE**

Formal List:
------------

Basic list of things that need doing. All contributors can/should edit.

Note that all items that need to be fixed are marked "TODO" in the code.
Critical items are marked "XXX" or "TODO/XXX"

Iteration I Goals
-----------------
**Replacing the centralized web** needs to become an obvious paradigm shift for
other developers, therefore bootstrapping web content into Sylph needs to be 
implemented well. When people see this, they will understand why the web needs
to be replaced. 

* **Top content** (per the user's interests) needs to be identified. 
	* Only the best stories and commentary should be presented to the user 
	  unless they want to see more. 
* **Clustering similar items**: Similar stories should be clustered with 
  the 'best' coverage presented as the default view. 
* **Comments should be centralized**.
* **Everything we want to read** should be accessible through Sylph--virtually 
  no external links, if possible! (Perhaps that can only be realized 
  long-term.)
* Make it possible to **save & archive** stories and comments that are 
  important to us. Make them easy to search and share.

Immediate
---------
**Concentrate on web2rdf and bootstrapping web content into Sylph.**

Theory
------
* Fundamentally, we can't have users data change unless they're verified. But
  what if a new (untrusted) node changes a person in the graph that they're 
  not supposed to?

> A user can have an endpoint URI be their resource URI if we wish, since 
> essentially they are different data models. 


Core/backend system
-------------------
* Improve and expand upon "Utilities" libraries
* Move core/ -> apps/
* Extensible API dispatcher system
* Make tasks/API easier to debug

Celery-related
--------------
* Run tasks immediately without RabbitMQ if it is detected RabbitMQ isn't 
  running and DEBUG=True.
* Easy way to use Celery without RabbitMQ

Organization
------------
* API and Task design must be sensible.

Django apps
-----------
* **"Certify" app**, designed to certify that information is accurate. Could 
  work in addition to PGP signing. Protected info may require indentification 
  from the requester. 
* **"Following" app**, designed to manage subscriptions to various resource
  feeds. (Should this be 'core'?)
* **"Ratings" app**, designed to rate resources and aggregate the ratings of
  third parties.

Libraries to explore
--------------------
* [Django-South](http://south.aeracode.org/) for updating models when they 
  change. 
